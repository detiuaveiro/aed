==5508== Memcheck, a memory error detector
==5508== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==5508== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==5508== Command: ./BSTreeTest
==5508== 
CREATED AN EMPTY TREE
0 elements
height = -1

INSERTING
BSTreeAdd(t1, &(8)) -> 1
   /#
:[0]8 
   \#
numNodes: 1
BSTreeAdd(t1, &(4)) -> 1
       /#
   /[0]4 
       \#
:[1]8 
   \#
numNodes: 2
BSTreeAdd(t1, &(9)) -> 1
       /#
   /[0]4 
       \#
:[1]8 
       /#
   \[0]9 
       \#
numNodes: 3
BSTreeAdd(t1, &(4)) -> 0
       /#
   /[0]4 
       \#
:[1]8 
       /#
   \[0]9 
       \#
numNodes: 3
BSTreeAdd(t1, &(3)) -> 1
           /#
       /[0]3 
           \#
   /[1]4 
       \#
:[2]8 
       /#
   \[0]9 
       \#
numNodes: 4
BSTreeAdd(t1, &(1)) -> 1
           /#
       /[0]1 
           \#
   /[1]3 
           /#
       \[0]4 
           \#
:[2]8 
       /#
   \[0]9 
       \#
numNodes: 5
BSTreeAdd(t1, &(10)) -> 1
           /#
       /[0]1 
           \#
   /[1]3 
           /#
       \[0]4 
           \#
:[2]8 
       /#
   \[1]9 
           /#
       \[0]10 
           \#
numNodes: 6
BSTreeAdd(t1, &(0)) -> 1
               /#
           /[0]0 
               \#
       /[1]1 
           \#
   /[2]3 
           /#
       \[0]4 
           \#
:[3]8 
       /#
   \[1]9 
           /#
       \[0]10 
           \#
numNodes: 7
BSTreeAdd(t1, &(2)) -> 1
               /#
           /[0]0 
               \#
       /[1]1 
               /#
           \[0]2 
               \#
   /[2]3 
           /#
       \[0]4 
           \#
:[3]8 
       /#
   \[1]9 
           /#
       \[0]10 
           \#
numNodes: 8
BSTreeAdd(t1, &(5)) -> 1
               /#
           /[0]0 
               \#
       /[1]1 
               /#
           \[0]2 
               \#
   /[2]3 
           /#
       \[1]4 
               /#
           \[0]5 
               \#
:[3]8 
       /#
   \[1]9 
           /#
       \[0]10 
           \#
numNodes: 9
BSTreeAdd(t1, &(7)) -> 1
               /#
           /[0]0 
               \#
       /[1]1 
               /#
           \[0]2 
               \#
   /[2]3 
               /#
           /[0]4 
               \#
       \[1]5 
               /#
           \[0]7 
               \#
:[3]8 
       /#
   \[1]9 
           /#
       \[0]10 
           \#
numNodes: 10
BSTreeAdd(t1, &(8)) -> 0
               /#
           /[0]0 
               \#
       /[1]1 
               /#
           \[0]2 
               \#
   /[2]3 
               /#
           /[0]4 
               \#
       \[1]5 
               /#
           \[0]7 
               \#
:[3]8 
       /#
   \[1]9 
           /#
       \[0]10 
           \#
numNodes: 10
BSTreeAdd(t1, &(6)) -> 1
               /#
           /[0]0 
               \#
       /[1]1 
               /#
           \[0]2 
               \#
   /[2]3 
           /#
       \[0]4 
           \#
:[3]5 
               /#
           /[0]6 
               \#
       /[1]7 
           \#
   \[2]8 
           /#
       \[1]9 
               /#
           \[0]10 
               \#
numNodes: 11

FINISHED INSERTING

QUERY FUNCTIONS
NumElements = 11
Height = 3
Min = 0
Max = 10

TREE CONTAINS
BSTreeContains(t1, &(-1)) -> 0
BSTreeContains(t1, &(2)) -> 1
BSTreeContains(t1, &(5)) -> 1
BSTreeContains(t1, &(8)) -> 1
BSTreeContains(t1, &(11)) -> 0
BSTreeContains(t1, &(14)) -> 0

TRAVERSE
0 1 2 3 4 5 6 7 8 9 10 

TRAVERSE with BSTreeGetItems
0 1 2 3 4 5 6 7 8 9 10 

REMOVING items using their VALUE
BSTreeRemove(t1, &(4)) -> 1
           /#
       /[0]0 
           \#
   /[2]1 
               /#
           /[0]2 
               \#
       \[1]3 
           \#
:[3]5 
               /#
           /[0]6 
               \#
       /[1]7 
           \#
   \[2]8 
           /#
       \[1]9 
               /#
           \[0]10 
               \#
numNodes: 10
BSTreeRemove(t1, &(4)) -> 0
           /#
       /[0]0 
           \#
   /[2]1 
               /#
           /[0]2 
               \#
       \[1]3 
           \#
:[3]5 
               /#
           /[0]6 
               \#
       /[1]7 
           \#
   \[2]8 
           /#
       \[1]9 
               /#
           \[0]10 
               \#
numNodes: 10
BSTreeRemove(t1, &(1)) -> 1
           /#
       /[0]0 
           \#
   /[1]2 
           /#
       \[0]3 
           \#
:[3]5 
               /#
           /[0]6 
               \#
       /[1]7 
           \#
   \[2]8 
           /#
       \[1]9 
               /#
           \[0]10 
               \#
numNodes: 9
BSTreeRemove(t1, &(0)) -> 1
       /#
   /[1]2 
           /#
       \[0]3 
           \#
:[3]5 
               /#
           /[0]6 
               \#
       /[1]7 
           \#
   \[2]8 
           /#
       \[1]9 
               /#
           \[0]10 
               \#
numNodes: 8
BSTreeRemove(t1, &(5)) -> 1
       /#
   /[1]2 
           /#
       \[0]3 
           \#
:[3]6 
           /#
       /[0]7 
           \#
   \[2]8 
           /#
       \[1]9 
               /#
           \[0]10 
               \#
numNodes: 7
BSTreeRemove(t1, &(8)) -> 1
       /#
   /[1]2 
           /#
       \[0]3 
           \#
:[2]6 
           /#
       /[0]7 
           \#
   \[1]9 
           /#
       \[0]10 
           \#
numNodes: 6

FINISHED REMOVING
6 elements
height = 2
2 3 6 7 9 10 

REMOVING remaining items in decreasing order
BSTreeRemove(t1, &(10)) -> 1
       /#
   /[1]2 
           /#
       \[0]3 
           \#
:[2]6 
           /#
       /[0]7 
           \#
   \[1]9 
       \#
numNodes: 5
BSTreeRemove(t1, &(9)) -> 1
       /#
   /[1]2 
           /#
       \[0]3 
           \#
:[2]6 
       /#
   \[0]7 
       \#
numNodes: 4
BSTreeRemove(t1, &(7)) -> 1
       /#
   /[0]2 
       \#
:[1]3 
       /#
   \[0]6 
       \#
numNodes: 3
BSTreeRemove(t1, &(6)) -> 1
       /#
   /[0]2 
       \#
:[1]3 
   \#
numNodes: 2
BSTreeRemove(t1, &(3)) -> 1
   /#
:[0]2 
   \#
numNodes: 1
BSTreeRemove(t1, &(2)) -> 1
:#
numNodes: 0

FINISHED REMOVING
0 elements
height = -1

==5508== 
==5508== HEAP SUMMARY:
==5508==     in use at exit: 0 bytes in 0 blocks
==5508==   total heap usage: 25 allocs, 25 frees, 4,680 bytes allocated
==5508== 
==5508== All heap blocks were freed -- no leaks are possible
==5508== 
==5508== For lists of detected and suppressed errors, rerun with: -s
==5508== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
